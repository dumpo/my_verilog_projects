// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 9.5 and Filter Design HDL Coder 3.1.4.
// Generated on: 2020-11-17 10:20:56
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// TargetDirectory: C:\Users\huifu\Desktop\filter
// AddPipelineRegisters: on
// CoefficientSource: ProcessorInterface
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 51
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module filter
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                write_enable,
                write_done,
                write_address,
                coeffs_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   [63:0] filter_in; //double
  input   write_enable; 
  input   write_done; 
  input   [63:0] write_address; //double
  input   [63:0] coeffs_in; //double
  output  [63:0] filter_out; //double

////////////////////////////////////////////////////////////////
//Module Architecture: filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  // Signals
  real delay_pipeline [0:50] ; // double
  real write_address_reg; // double
  real coeffs_in_reg; // double
  reg  write_enable_reg; // boolean
  reg  write_done_reg; // boolean
  real coeffs_assigned [0:50] ; // double
  real coeffs_temp [0:50] ; // double
  real coeffs_regs [0:50] ; // double
  real coeffs_shadow [0:50] ; // double
  real product51; // double
  real product50; // double
  real product49; // double
  real product48; // double
  real product47; // double
  real product46; // double
  real product45; // double
  real product44; // double
  real product43; // double
  real product42; // double
  real product41; // double
  real product40; // double
  real product39; // double
  real product38; // double
  real product37; // double
  real product36; // double
  real product35; // double
  real product34; // double
  real product33; // double
  real product32; // double
  real product31; // double
  real product30; // double
  real product29; // double
  real product28; // double
  real product27; // double
  real product26; // double
  real product25; // double
  real product24; // double
  real product23; // double
  real product22; // double
  real product21; // double
  real product20; // double
  real product19; // double
  real product18; // double
  real product17; // double
  real product16; // double
  real product15; // double
  real product14; // double
  real product13; // double
  real product12; // double
  real product11; // double
  real product10; // double
  real product9; // double
  real product8; // double
  real product7; // double
  real product6; // double
  real product5; // double
  real product4; // double
  real product3; // double
  real product2; // double
  real product1; // double
  real sum_final; // double
  real sum1_1; // double
  real sumpipe1_1; // double
  real sum1_2; // double
  real sumpipe1_2; // double
  real sum1_3; // double
  real sumpipe1_3; // double
  real sum1_4; // double
  real sumpipe1_4; // double
  real sum1_5; // double
  real sumpipe1_5; // double
  real sum1_6; // double
  real sumpipe1_6; // double
  real sum1_7; // double
  real sumpipe1_7; // double
  real sum1_8; // double
  real sumpipe1_8; // double
  real sum1_9; // double
  real sumpipe1_9; // double
  real sum1_10; // double
  real sumpipe1_10; // double
  real sum1_11; // double
  real sumpipe1_11; // double
  real sum1_12; // double
  real sumpipe1_12; // double
  real sum1_13; // double
  real sumpipe1_13; // double
  real sum1_14; // double
  real sumpipe1_14; // double
  real sum1_15; // double
  real sumpipe1_15; // double
  real sum1_16; // double
  real sumpipe1_16; // double
  real sum1_17; // double
  real sumpipe1_17; // double
  real sum1_18; // double
  real sumpipe1_18; // double
  real sum1_19; // double
  real sumpipe1_19; // double
  real sum1_20; // double
  real sumpipe1_20; // double
  real sum1_21; // double
  real sumpipe1_21; // double
  real sum1_22; // double
  real sumpipe1_22; // double
  real sum1_23; // double
  real sumpipe1_23; // double
  real sum1_24; // double
  real sumpipe1_24; // double
  real sum1_25; // double
  real sumpipe1_25; // double
  real sumpipe1_26; // double
  real sum2_1; // double
  real sumpipe2_1; // double
  real sum2_2; // double
  real sumpipe2_2; // double
  real sum2_3; // double
  real sumpipe2_3; // double
  real sum2_4; // double
  real sumpipe2_4; // double
  real sum2_5; // double
  real sumpipe2_5; // double
  real sum2_6; // double
  real sumpipe2_6; // double
  real sum2_7; // double
  real sumpipe2_7; // double
  real sum2_8; // double
  real sumpipe2_8; // double
  real sum2_9; // double
  real sumpipe2_9; // double
  real sum2_10; // double
  real sumpipe2_10; // double
  real sum2_11; // double
  real sumpipe2_11; // double
  real sum2_12; // double
  real sumpipe2_12; // double
  real sum2_13; // double
  real sumpipe2_13; // double
  real sum3_1; // double
  real sumpipe3_1; // double
  real sum3_2; // double
  real sumpipe3_2; // double
  real sum3_3; // double
  real sumpipe3_3; // double
  real sum3_4; // double
  real sumpipe3_4; // double
  real sum3_5; // double
  real sumpipe3_5; // double
  real sum3_6; // double
  real sumpipe3_6; // double
  real sumpipe3_7; // double
  real sum4_1; // double
  real sumpipe4_1; // double
  real sum4_2; // double
  real sumpipe4_2; // double
  real sum4_3; // double
  real sumpipe4_3; // double
  real sumpipe4_4; // double
  real sum5_1; // double
  real sumpipe5_1; // double
  real sum5_2; // double
  real sumpipe5_2; // double
  real sum6_1; // double
  real sumpipe6_1; // double
  real output_typeconvert; // double
  real output_register; // double

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0.0000000000000000E+00;
        delay_pipeline[1] <= 0.0000000000000000E+00;
        delay_pipeline[2] <= 0.0000000000000000E+00;
        delay_pipeline[3] <= 0.0000000000000000E+00;
        delay_pipeline[4] <= 0.0000000000000000E+00;
        delay_pipeline[5] <= 0.0000000000000000E+00;
        delay_pipeline[6] <= 0.0000000000000000E+00;
        delay_pipeline[7] <= 0.0000000000000000E+00;
        delay_pipeline[8] <= 0.0000000000000000E+00;
        delay_pipeline[9] <= 0.0000000000000000E+00;
        delay_pipeline[10] <= 0.0000000000000000E+00;
        delay_pipeline[11] <= 0.0000000000000000E+00;
        delay_pipeline[12] <= 0.0000000000000000E+00;
        delay_pipeline[13] <= 0.0000000000000000E+00;
        delay_pipeline[14] <= 0.0000000000000000E+00;
        delay_pipeline[15] <= 0.0000000000000000E+00;
        delay_pipeline[16] <= 0.0000000000000000E+00;
        delay_pipeline[17] <= 0.0000000000000000E+00;
        delay_pipeline[18] <= 0.0000000000000000E+00;
        delay_pipeline[19] <= 0.0000000000000000E+00;
        delay_pipeline[20] <= 0.0000000000000000E+00;
        delay_pipeline[21] <= 0.0000000000000000E+00;
        delay_pipeline[22] <= 0.0000000000000000E+00;
        delay_pipeline[23] <= 0.0000000000000000E+00;
        delay_pipeline[24] <= 0.0000000000000000E+00;
        delay_pipeline[25] <= 0.0000000000000000E+00;
        delay_pipeline[26] <= 0.0000000000000000E+00;
        delay_pipeline[27] <= 0.0000000000000000E+00;
        delay_pipeline[28] <= 0.0000000000000000E+00;
        delay_pipeline[29] <= 0.0000000000000000E+00;
        delay_pipeline[30] <= 0.0000000000000000E+00;
        delay_pipeline[31] <= 0.0000000000000000E+00;
        delay_pipeline[32] <= 0.0000000000000000E+00;
        delay_pipeline[33] <= 0.0000000000000000E+00;
        delay_pipeline[34] <= 0.0000000000000000E+00;
        delay_pipeline[35] <= 0.0000000000000000E+00;
        delay_pipeline[36] <= 0.0000000000000000E+00;
        delay_pipeline[37] <= 0.0000000000000000E+00;
        delay_pipeline[38] <= 0.0000000000000000E+00;
        delay_pipeline[39] <= 0.0000000000000000E+00;
        delay_pipeline[40] <= 0.0000000000000000E+00;
        delay_pipeline[41] <= 0.0000000000000000E+00;
        delay_pipeline[42] <= 0.0000000000000000E+00;
        delay_pipeline[43] <= 0.0000000000000000E+00;
        delay_pipeline[44] <= 0.0000000000000000E+00;
        delay_pipeline[45] <= 0.0000000000000000E+00;
        delay_pipeline[46] <= 0.0000000000000000E+00;
        delay_pipeline[47] <= 0.0000000000000000E+00;
        delay_pipeline[48] <= 0.0000000000000000E+00;
        delay_pipeline[49] <= 0.0000000000000000E+00;
        delay_pipeline[50] <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= $bitstoreal(filter_in);
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
        end
      end
    end // Delay_Pipeline_process


  always @ (posedge clk or posedge reset)
    begin: Input_Register_process
      if (reset == 1'b1) begin
        write_enable_reg <= 1'b0;
        write_done_reg <= 1'b0;
        write_address_reg <= 0.0000000000000000E+00;
        coeffs_in_reg <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          write_enable_reg <= write_enable;
          write_done_reg <= write_done;
          write_address_reg <= $bitstoreal(write_address);
          coeffs_in_reg <= $bitstoreal(coeffs_in);
        end
      end
    end // Input_Register_process

  always @* coeffs_assigned[0] <= (write_address_reg == 0.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[0];
  always @* coeffs_assigned[1] <= (write_address_reg == 1.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[1];
  always @* coeffs_assigned[2] <= (write_address_reg == 2.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[2];
  always @* coeffs_assigned[3] <= (write_address_reg == 3.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[3];
  always @* coeffs_assigned[4] <= (write_address_reg == 4.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[4];
  always @* coeffs_assigned[5] <= (write_address_reg == 5.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[5];
  always @* coeffs_assigned[6] <= (write_address_reg == 6.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[6];
  always @* coeffs_assigned[7] <= (write_address_reg == 7.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[7];
  always @* coeffs_assigned[8] <= (write_address_reg == 8.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[8];
  always @* coeffs_assigned[9] <= (write_address_reg == 9.0000000000000000E+00) ? coeffs_in_reg :
                        coeffs_regs[9];
  always @* coeffs_assigned[10] <= (write_address_reg == 1.0000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[10];
  always @* coeffs_assigned[11] <= (write_address_reg == 1.1000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[11];
  always @* coeffs_assigned[12] <= (write_address_reg == 1.2000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[12];
  always @* coeffs_assigned[13] <= (write_address_reg == 1.3000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[13];
  always @* coeffs_assigned[14] <= (write_address_reg == 1.4000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[14];
  always @* coeffs_assigned[15] <= (write_address_reg == 1.5000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[15];
  always @* coeffs_assigned[16] <= (write_address_reg == 1.6000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[16];
  always @* coeffs_assigned[17] <= (write_address_reg == 1.7000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[17];
  always @* coeffs_assigned[18] <= (write_address_reg == 1.8000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[18];
  always @* coeffs_assigned[19] <= (write_address_reg == 1.9000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[19];
  always @* coeffs_assigned[20] <= (write_address_reg == 2.0000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[20];
  always @* coeffs_assigned[21] <= (write_address_reg == 2.1000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[21];
  always @* coeffs_assigned[22] <= (write_address_reg == 2.2000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[22];
  always @* coeffs_assigned[23] <= (write_address_reg == 2.3000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[23];
  always @* coeffs_assigned[24] <= (write_address_reg == 2.4000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[24];
  always @* coeffs_assigned[25] <= (write_address_reg == 2.5000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[25];
  always @* coeffs_assigned[26] <= (write_address_reg == 2.6000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[26];
  always @* coeffs_assigned[27] <= (write_address_reg == 2.7000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[27];
  always @* coeffs_assigned[28] <= (write_address_reg == 2.8000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[28];
  always @* coeffs_assigned[29] <= (write_address_reg == 2.9000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[29];
  always @* coeffs_assigned[30] <= (write_address_reg == 3.0000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[30];
  always @* coeffs_assigned[31] <= (write_address_reg == 3.1000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[31];
  always @* coeffs_assigned[32] <= (write_address_reg == 3.2000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[32];
  always @* coeffs_assigned[33] <= (write_address_reg == 3.3000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[33];
  always @* coeffs_assigned[34] <= (write_address_reg == 3.4000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[34];
  always @* coeffs_assigned[35] <= (write_address_reg == 3.5000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[35];
  always @* coeffs_assigned[36] <= (write_address_reg == 3.6000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[36];
  always @* coeffs_assigned[37] <= (write_address_reg == 3.7000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[37];
  always @* coeffs_assigned[38] <= (write_address_reg == 3.8000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[38];
  always @* coeffs_assigned[39] <= (write_address_reg == 3.9000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[39];
  always @* coeffs_assigned[40] <= (write_address_reg == 4.0000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[40];
  always @* coeffs_assigned[41] <= (write_address_reg == 4.1000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[41];
  always @* coeffs_assigned[42] <= (write_address_reg == 4.2000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[42];
  always @* coeffs_assigned[43] <= (write_address_reg == 4.3000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[43];
  always @* coeffs_assigned[44] <= (write_address_reg == 4.4000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[44];
  always @* coeffs_assigned[45] <= (write_address_reg == 4.5000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[45];
  always @* coeffs_assigned[46] <= (write_address_reg == 4.6000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[46];
  always @* coeffs_assigned[47] <= (write_address_reg == 4.7000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[47];
  always @* coeffs_assigned[48] <= (write_address_reg == 4.8000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[48];
  always @* coeffs_assigned[49] <= (write_address_reg == 4.9000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[49];
  always @* coeffs_assigned[50] <= (write_address_reg == 5.0000000000000000E+01) ? coeffs_in_reg :
                         coeffs_regs[50];
  always @* coeffs_temp[0] <= (write_enable_reg == 1'b1) ? coeffs_assigned[0] :
                    coeffs_regs[0];
  always @* coeffs_temp[1] <= (write_enable_reg == 1'b1) ? coeffs_assigned[1] :
                    coeffs_regs[1];
  always @* coeffs_temp[2] <= (write_enable_reg == 1'b1) ? coeffs_assigned[2] :
                    coeffs_regs[2];
  always @* coeffs_temp[3] <= (write_enable_reg == 1'b1) ? coeffs_assigned[3] :
                    coeffs_regs[3];
  always @* coeffs_temp[4] <= (write_enable_reg == 1'b1) ? coeffs_assigned[4] :
                    coeffs_regs[4];
  always @* coeffs_temp[5] <= (write_enable_reg == 1'b1) ? coeffs_assigned[5] :
                    coeffs_regs[5];
  always @* coeffs_temp[6] <= (write_enable_reg == 1'b1) ? coeffs_assigned[6] :
                    coeffs_regs[6];
  always @* coeffs_temp[7] <= (write_enable_reg == 1'b1) ? coeffs_assigned[7] :
                    coeffs_regs[7];
  always @* coeffs_temp[8] <= (write_enable_reg == 1'b1) ? coeffs_assigned[8] :
                    coeffs_regs[8];
  always @* coeffs_temp[9] <= (write_enable_reg == 1'b1) ? coeffs_assigned[9] :
                    coeffs_regs[9];
  always @* coeffs_temp[10] <= (write_enable_reg == 1'b1) ? coeffs_assigned[10] :
                     coeffs_regs[10];
  always @* coeffs_temp[11] <= (write_enable_reg == 1'b1) ? coeffs_assigned[11] :
                     coeffs_regs[11];
  always @* coeffs_temp[12] <= (write_enable_reg == 1'b1) ? coeffs_assigned[12] :
                     coeffs_regs[12];
  always @* coeffs_temp[13] <= (write_enable_reg == 1'b1) ? coeffs_assigned[13] :
                     coeffs_regs[13];
  always @* coeffs_temp[14] <= (write_enable_reg == 1'b1) ? coeffs_assigned[14] :
                     coeffs_regs[14];
  always @* coeffs_temp[15] <= (write_enable_reg == 1'b1) ? coeffs_assigned[15] :
                     coeffs_regs[15];
  always @* coeffs_temp[16] <= (write_enable_reg == 1'b1) ? coeffs_assigned[16] :
                     coeffs_regs[16];
  always @* coeffs_temp[17] <= (write_enable_reg == 1'b1) ? coeffs_assigned[17] :
                     coeffs_regs[17];
  always @* coeffs_temp[18] <= (write_enable_reg == 1'b1) ? coeffs_assigned[18] :
                     coeffs_regs[18];
  always @* coeffs_temp[19] <= (write_enable_reg == 1'b1) ? coeffs_assigned[19] :
                     coeffs_regs[19];
  always @* coeffs_temp[20] <= (write_enable_reg == 1'b1) ? coeffs_assigned[20] :
                     coeffs_regs[20];
  always @* coeffs_temp[21] <= (write_enable_reg == 1'b1) ? coeffs_assigned[21] :
                     coeffs_regs[21];
  always @* coeffs_temp[22] <= (write_enable_reg == 1'b1) ? coeffs_assigned[22] :
                     coeffs_regs[22];
  always @* coeffs_temp[23] <= (write_enable_reg == 1'b1) ? coeffs_assigned[23] :
                     coeffs_regs[23];
  always @* coeffs_temp[24] <= (write_enable_reg == 1'b1) ? coeffs_assigned[24] :
                     coeffs_regs[24];
  always @* coeffs_temp[25] <= (write_enable_reg == 1'b1) ? coeffs_assigned[25] :
                     coeffs_regs[25];
  always @* coeffs_temp[26] <= (write_enable_reg == 1'b1) ? coeffs_assigned[26] :
                     coeffs_regs[26];
  always @* coeffs_temp[27] <= (write_enable_reg == 1'b1) ? coeffs_assigned[27] :
                     coeffs_regs[27];
  always @* coeffs_temp[28] <= (write_enable_reg == 1'b1) ? coeffs_assigned[28] :
                     coeffs_regs[28];
  always @* coeffs_temp[29] <= (write_enable_reg == 1'b1) ? coeffs_assigned[29] :
                     coeffs_regs[29];
  always @* coeffs_temp[30] <= (write_enable_reg == 1'b1) ? coeffs_assigned[30] :
                     coeffs_regs[30];
  always @* coeffs_temp[31] <= (write_enable_reg == 1'b1) ? coeffs_assigned[31] :
                     coeffs_regs[31];
  always @* coeffs_temp[32] <= (write_enable_reg == 1'b1) ? coeffs_assigned[32] :
                     coeffs_regs[32];
  always @* coeffs_temp[33] <= (write_enable_reg == 1'b1) ? coeffs_assigned[33] :
                     coeffs_regs[33];
  always @* coeffs_temp[34] <= (write_enable_reg == 1'b1) ? coeffs_assigned[34] :
                     coeffs_regs[34];
  always @* coeffs_temp[35] <= (write_enable_reg == 1'b1) ? coeffs_assigned[35] :
                     coeffs_regs[35];
  always @* coeffs_temp[36] <= (write_enable_reg == 1'b1) ? coeffs_assigned[36] :
                     coeffs_regs[36];
  always @* coeffs_temp[37] <= (write_enable_reg == 1'b1) ? coeffs_assigned[37] :
                     coeffs_regs[37];
  always @* coeffs_temp[38] <= (write_enable_reg == 1'b1) ? coeffs_assigned[38] :
                     coeffs_regs[38];
  always @* coeffs_temp[39] <= (write_enable_reg == 1'b1) ? coeffs_assigned[39] :
                     coeffs_regs[39];
  always @* coeffs_temp[40] <= (write_enable_reg == 1'b1) ? coeffs_assigned[40] :
                     coeffs_regs[40];
  always @* coeffs_temp[41] <= (write_enable_reg == 1'b1) ? coeffs_assigned[41] :
                     coeffs_regs[41];
  always @* coeffs_temp[42] <= (write_enable_reg == 1'b1) ? coeffs_assigned[42] :
                     coeffs_regs[42];
  always @* coeffs_temp[43] <= (write_enable_reg == 1'b1) ? coeffs_assigned[43] :
                     coeffs_regs[43];
  always @* coeffs_temp[44] <= (write_enable_reg == 1'b1) ? coeffs_assigned[44] :
                     coeffs_regs[44];
  always @* coeffs_temp[45] <= (write_enable_reg == 1'b1) ? coeffs_assigned[45] :
                     coeffs_regs[45];
  always @* coeffs_temp[46] <= (write_enable_reg == 1'b1) ? coeffs_assigned[46] :
                     coeffs_regs[46];
  always @* coeffs_temp[47] <= (write_enable_reg == 1'b1) ? coeffs_assigned[47] :
                     coeffs_regs[47];
  always @* coeffs_temp[48] <= (write_enable_reg == 1'b1) ? coeffs_assigned[48] :
                     coeffs_regs[48];
  always @* coeffs_temp[49] <= (write_enable_reg == 1'b1) ? coeffs_assigned[49] :
                     coeffs_regs[49];
  always @* coeffs_temp[50] <= (write_enable_reg == 1'b1) ? coeffs_assigned[50] :
                     coeffs_regs[50];
  always @ (posedge clk or posedge reset)
    begin: Coeffs_Registers_process
      if (reset == 1'b1) begin
        coeffs_regs[0] <= 0.0000000000000000E+00;
        coeffs_regs[1] <= 0.0000000000000000E+00;
        coeffs_regs[2] <= 0.0000000000000000E+00;
        coeffs_regs[3] <= 0.0000000000000000E+00;
        coeffs_regs[4] <= 0.0000000000000000E+00;
        coeffs_regs[5] <= 0.0000000000000000E+00;
        coeffs_regs[6] <= 0.0000000000000000E+00;
        coeffs_regs[7] <= 0.0000000000000000E+00;
        coeffs_regs[8] <= 0.0000000000000000E+00;
        coeffs_regs[9] <= 0.0000000000000000E+00;
        coeffs_regs[10] <= 0.0000000000000000E+00;
        coeffs_regs[11] <= 0.0000000000000000E+00;
        coeffs_regs[12] <= 0.0000000000000000E+00;
        coeffs_regs[13] <= 0.0000000000000000E+00;
        coeffs_regs[14] <= 0.0000000000000000E+00;
        coeffs_regs[15] <= 0.0000000000000000E+00;
        coeffs_regs[16] <= 0.0000000000000000E+00;
        coeffs_regs[17] <= 0.0000000000000000E+00;
        coeffs_regs[18] <= 0.0000000000000000E+00;
        coeffs_regs[19] <= 0.0000000000000000E+00;
        coeffs_regs[20] <= 0.0000000000000000E+00;
        coeffs_regs[21] <= 0.0000000000000000E+00;
        coeffs_regs[22] <= 0.0000000000000000E+00;
        coeffs_regs[23] <= 0.0000000000000000E+00;
        coeffs_regs[24] <= 0.0000000000000000E+00;
        coeffs_regs[25] <= 0.0000000000000000E+00;
        coeffs_regs[26] <= 0.0000000000000000E+00;
        coeffs_regs[27] <= 0.0000000000000000E+00;
        coeffs_regs[28] <= 0.0000000000000000E+00;
        coeffs_regs[29] <= 0.0000000000000000E+00;
        coeffs_regs[30] <= 0.0000000000000000E+00;
        coeffs_regs[31] <= 0.0000000000000000E+00;
        coeffs_regs[32] <= 0.0000000000000000E+00;
        coeffs_regs[33] <= 0.0000000000000000E+00;
        coeffs_regs[34] <= 0.0000000000000000E+00;
        coeffs_regs[35] <= 0.0000000000000000E+00;
        coeffs_regs[36] <= 0.0000000000000000E+00;
        coeffs_regs[37] <= 0.0000000000000000E+00;
        coeffs_regs[38] <= 0.0000000000000000E+00;
        coeffs_regs[39] <= 0.0000000000000000E+00;
        coeffs_regs[40] <= 0.0000000000000000E+00;
        coeffs_regs[41] <= 0.0000000000000000E+00;
        coeffs_regs[42] <= 0.0000000000000000E+00;
        coeffs_regs[43] <= 0.0000000000000000E+00;
        coeffs_regs[44] <= 0.0000000000000000E+00;
        coeffs_regs[45] <= 0.0000000000000000E+00;
        coeffs_regs[46] <= 0.0000000000000000E+00;
        coeffs_regs[47] <= 0.0000000000000000E+00;
        coeffs_regs[48] <= 0.0000000000000000E+00;
        coeffs_regs[49] <= 0.0000000000000000E+00;
        coeffs_regs[50] <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          coeffs_regs[0] <= coeffs_temp[0];
          coeffs_regs[1] <= coeffs_temp[1];
          coeffs_regs[2] <= coeffs_temp[2];
          coeffs_regs[3] <= coeffs_temp[3];
          coeffs_regs[4] <= coeffs_temp[4];
          coeffs_regs[5] <= coeffs_temp[5];
          coeffs_regs[6] <= coeffs_temp[6];
          coeffs_regs[7] <= coeffs_temp[7];
          coeffs_regs[8] <= coeffs_temp[8];
          coeffs_regs[9] <= coeffs_temp[9];
          coeffs_regs[10] <= coeffs_temp[10];
          coeffs_regs[11] <= coeffs_temp[11];
          coeffs_regs[12] <= coeffs_temp[12];
          coeffs_regs[13] <= coeffs_temp[13];
          coeffs_regs[14] <= coeffs_temp[14];
          coeffs_regs[15] <= coeffs_temp[15];
          coeffs_regs[16] <= coeffs_temp[16];
          coeffs_regs[17] <= coeffs_temp[17];
          coeffs_regs[18] <= coeffs_temp[18];
          coeffs_regs[19] <= coeffs_temp[19];
          coeffs_regs[20] <= coeffs_temp[20];
          coeffs_regs[21] <= coeffs_temp[21];
          coeffs_regs[22] <= coeffs_temp[22];
          coeffs_regs[23] <= coeffs_temp[23];
          coeffs_regs[24] <= coeffs_temp[24];
          coeffs_regs[25] <= coeffs_temp[25];
          coeffs_regs[26] <= coeffs_temp[26];
          coeffs_regs[27] <= coeffs_temp[27];
          coeffs_regs[28] <= coeffs_temp[28];
          coeffs_regs[29] <= coeffs_temp[29];
          coeffs_regs[30] <= coeffs_temp[30];
          coeffs_regs[31] <= coeffs_temp[31];
          coeffs_regs[32] <= coeffs_temp[32];
          coeffs_regs[33] <= coeffs_temp[33];
          coeffs_regs[34] <= coeffs_temp[34];
          coeffs_regs[35] <= coeffs_temp[35];
          coeffs_regs[36] <= coeffs_temp[36];
          coeffs_regs[37] <= coeffs_temp[37];
          coeffs_regs[38] <= coeffs_temp[38];
          coeffs_regs[39] <= coeffs_temp[39];
          coeffs_regs[40] <= coeffs_temp[40];
          coeffs_regs[41] <= coeffs_temp[41];
          coeffs_regs[42] <= coeffs_temp[42];
          coeffs_regs[43] <= coeffs_temp[43];
          coeffs_regs[44] <= coeffs_temp[44];
          coeffs_regs[45] <= coeffs_temp[45];
          coeffs_regs[46] <= coeffs_temp[46];
          coeffs_regs[47] <= coeffs_temp[47];
          coeffs_regs[48] <= coeffs_temp[48];
          coeffs_regs[49] <= coeffs_temp[49];
          coeffs_regs[50] <= coeffs_temp[50];
        end
      end
    end // Coeffs_Registers_process

  always @ (posedge clk or posedge reset)
    begin: Coeffs_Shadow_Regs_process
      if (reset == 1'b1) begin
        coeffs_shadow[0] <= 0.0000000000000000E+00;
        coeffs_shadow[1] <= 0.0000000000000000E+00;
        coeffs_shadow[2] <= 0.0000000000000000E+00;
        coeffs_shadow[3] <= 0.0000000000000000E+00;
        coeffs_shadow[4] <= 0.0000000000000000E+00;
        coeffs_shadow[5] <= 0.0000000000000000E+00;
        coeffs_shadow[6] <= 0.0000000000000000E+00;
        coeffs_shadow[7] <= 0.0000000000000000E+00;
        coeffs_shadow[8] <= 0.0000000000000000E+00;
        coeffs_shadow[9] <= 0.0000000000000000E+00;
        coeffs_shadow[10] <= 0.0000000000000000E+00;
        coeffs_shadow[11] <= 0.0000000000000000E+00;
        coeffs_shadow[12] <= 0.0000000000000000E+00;
        coeffs_shadow[13] <= 0.0000000000000000E+00;
        coeffs_shadow[14] <= 0.0000000000000000E+00;
        coeffs_shadow[15] <= 0.0000000000000000E+00;
        coeffs_shadow[16] <= 0.0000000000000000E+00;
        coeffs_shadow[17] <= 0.0000000000000000E+00;
        coeffs_shadow[18] <= 0.0000000000000000E+00;
        coeffs_shadow[19] <= 0.0000000000000000E+00;
        coeffs_shadow[20] <= 0.0000000000000000E+00;
        coeffs_shadow[21] <= 0.0000000000000000E+00;
        coeffs_shadow[22] <= 0.0000000000000000E+00;
        coeffs_shadow[23] <= 0.0000000000000000E+00;
        coeffs_shadow[24] <= 0.0000000000000000E+00;
        coeffs_shadow[25] <= 0.0000000000000000E+00;
        coeffs_shadow[26] <= 0.0000000000000000E+00;
        coeffs_shadow[27] <= 0.0000000000000000E+00;
        coeffs_shadow[28] <= 0.0000000000000000E+00;
        coeffs_shadow[29] <= 0.0000000000000000E+00;
        coeffs_shadow[30] <= 0.0000000000000000E+00;
        coeffs_shadow[31] <= 0.0000000000000000E+00;
        coeffs_shadow[32] <= 0.0000000000000000E+00;
        coeffs_shadow[33] <= 0.0000000000000000E+00;
        coeffs_shadow[34] <= 0.0000000000000000E+00;
        coeffs_shadow[35] <= 0.0000000000000000E+00;
        coeffs_shadow[36] <= 0.0000000000000000E+00;
        coeffs_shadow[37] <= 0.0000000000000000E+00;
        coeffs_shadow[38] <= 0.0000000000000000E+00;
        coeffs_shadow[39] <= 0.0000000000000000E+00;
        coeffs_shadow[40] <= 0.0000000000000000E+00;
        coeffs_shadow[41] <= 0.0000000000000000E+00;
        coeffs_shadow[42] <= 0.0000000000000000E+00;
        coeffs_shadow[43] <= 0.0000000000000000E+00;
        coeffs_shadow[44] <= 0.0000000000000000E+00;
        coeffs_shadow[45] <= 0.0000000000000000E+00;
        coeffs_shadow[46] <= 0.0000000000000000E+00;
        coeffs_shadow[47] <= 0.0000000000000000E+00;
        coeffs_shadow[48] <= 0.0000000000000000E+00;
        coeffs_shadow[49] <= 0.0000000000000000E+00;
        coeffs_shadow[50] <= 0.0000000000000000E+00;
      end
      else begin
        if (write_done_reg == 1'b1) begin
          coeffs_shadow[0] <= coeffs_regs[0];
          coeffs_shadow[1] <= coeffs_regs[1];
          coeffs_shadow[2] <= coeffs_regs[2];
          coeffs_shadow[3] <= coeffs_regs[3];
          coeffs_shadow[4] <= coeffs_regs[4];
          coeffs_shadow[5] <= coeffs_regs[5];
          coeffs_shadow[6] <= coeffs_regs[6];
          coeffs_shadow[7] <= coeffs_regs[7];
          coeffs_shadow[8] <= coeffs_regs[8];
          coeffs_shadow[9] <= coeffs_regs[9];
          coeffs_shadow[10] <= coeffs_regs[10];
          coeffs_shadow[11] <= coeffs_regs[11];
          coeffs_shadow[12] <= coeffs_regs[12];
          coeffs_shadow[13] <= coeffs_regs[13];
          coeffs_shadow[14] <= coeffs_regs[14];
          coeffs_shadow[15] <= coeffs_regs[15];
          coeffs_shadow[16] <= coeffs_regs[16];
          coeffs_shadow[17] <= coeffs_regs[17];
          coeffs_shadow[18] <= coeffs_regs[18];
          coeffs_shadow[19] <= coeffs_regs[19];
          coeffs_shadow[20] <= coeffs_regs[20];
          coeffs_shadow[21] <= coeffs_regs[21];
          coeffs_shadow[22] <= coeffs_regs[22];
          coeffs_shadow[23] <= coeffs_regs[23];
          coeffs_shadow[24] <= coeffs_regs[24];
          coeffs_shadow[25] <= coeffs_regs[25];
          coeffs_shadow[26] <= coeffs_regs[26];
          coeffs_shadow[27] <= coeffs_regs[27];
          coeffs_shadow[28] <= coeffs_regs[28];
          coeffs_shadow[29] <= coeffs_regs[29];
          coeffs_shadow[30] <= coeffs_regs[30];
          coeffs_shadow[31] <= coeffs_regs[31];
          coeffs_shadow[32] <= coeffs_regs[32];
          coeffs_shadow[33] <= coeffs_regs[33];
          coeffs_shadow[34] <= coeffs_regs[34];
          coeffs_shadow[35] <= coeffs_regs[35];
          coeffs_shadow[36] <= coeffs_regs[36];
          coeffs_shadow[37] <= coeffs_regs[37];
          coeffs_shadow[38] <= coeffs_regs[38];
          coeffs_shadow[39] <= coeffs_regs[39];
          coeffs_shadow[40] <= coeffs_regs[40];
          coeffs_shadow[41] <= coeffs_regs[41];
          coeffs_shadow[42] <= coeffs_regs[42];
          coeffs_shadow[43] <= coeffs_regs[43];
          coeffs_shadow[44] <= coeffs_regs[44];
          coeffs_shadow[45] <= coeffs_regs[45];
          coeffs_shadow[46] <= coeffs_regs[46];
          coeffs_shadow[47] <= coeffs_regs[47];
          coeffs_shadow[48] <= coeffs_regs[48];
          coeffs_shadow[49] <= coeffs_regs[49];
          coeffs_shadow[50] <= coeffs_regs[50];
        end
      end
    end // Coeffs_Shadow_Regs_process

  always @* product51 <= delay_pipeline[50] * coeffs_shadow[50];

  always @* product50 <= delay_pipeline[49] * coeffs_shadow[49];

  always @* product49 <= delay_pipeline[48] * coeffs_shadow[48];

  always @* product48 <= delay_pipeline[47] * coeffs_shadow[47];

  always @* product47 <= delay_pipeline[46] * coeffs_shadow[46];

  always @* product46 <= delay_pipeline[45] * coeffs_shadow[45];

  always @* product45 <= delay_pipeline[44] * coeffs_shadow[44];

  always @* product44 <= delay_pipeline[43] * coeffs_shadow[43];

  always @* product43 <= delay_pipeline[42] * coeffs_shadow[42];

  always @* product42 <= delay_pipeline[41] * coeffs_shadow[41];

  always @* product41 <= delay_pipeline[40] * coeffs_shadow[40];

  always @* product40 <= delay_pipeline[39] * coeffs_shadow[39];

  always @* product39 <= delay_pipeline[38] * coeffs_shadow[38];

  always @* product38 <= delay_pipeline[37] * coeffs_shadow[37];

  always @* product37 <= delay_pipeline[36] * coeffs_shadow[36];

  always @* product36 <= delay_pipeline[35] * coeffs_shadow[35];

  always @* product35 <= delay_pipeline[34] * coeffs_shadow[34];

  always @* product34 <= delay_pipeline[33] * coeffs_shadow[33];

  always @* product33 <= delay_pipeline[32] * coeffs_shadow[32];

  always @* product32 <= delay_pipeline[31] * coeffs_shadow[31];

  always @* product31 <= delay_pipeline[30] * coeffs_shadow[30];

  always @* product30 <= delay_pipeline[29] * coeffs_shadow[29];

  always @* product29 <= delay_pipeline[28] * coeffs_shadow[28];

  always @* product28 <= delay_pipeline[27] * coeffs_shadow[27];

  always @* product27 <= delay_pipeline[26] * coeffs_shadow[26];

  always @* product26 <= delay_pipeline[25] * coeffs_shadow[25];

  always @* product25 <= delay_pipeline[24] * coeffs_shadow[24];

  always @* product24 <= delay_pipeline[23] * coeffs_shadow[23];

  always @* product23 <= delay_pipeline[22] * coeffs_shadow[22];

  always @* product22 <= delay_pipeline[21] * coeffs_shadow[21];

  always @* product21 <= delay_pipeline[20] * coeffs_shadow[20];

  always @* product20 <= delay_pipeline[19] * coeffs_shadow[19];

  always @* product19 <= delay_pipeline[18] * coeffs_shadow[18];

  always @* product18 <= delay_pipeline[17] * coeffs_shadow[17];

  always @* product17 <= delay_pipeline[16] * coeffs_shadow[16];

  always @* product16 <= delay_pipeline[15] * coeffs_shadow[15];

  always @* product15 <= delay_pipeline[14] * coeffs_shadow[14];

  always @* product14 <= delay_pipeline[13] * coeffs_shadow[13];

  always @* product13 <= delay_pipeline[12] * coeffs_shadow[12];

  always @* product12 <= delay_pipeline[11] * coeffs_shadow[11];

  always @* product11 <= delay_pipeline[10] * coeffs_shadow[10];

  always @* product10 <= delay_pipeline[9] * coeffs_shadow[9];

  always @* product9 <= delay_pipeline[8] * coeffs_shadow[8];

  always @* product8 <= delay_pipeline[7] * coeffs_shadow[7];

  always @* product7 <= delay_pipeline[6] * coeffs_shadow[6];

  always @* product6 <= delay_pipeline[5] * coeffs_shadow[5];

  always @* product5 <= delay_pipeline[4] * coeffs_shadow[4];

  always @* product4 <= delay_pipeline[3] * coeffs_shadow[3];

  always @* product3 <= delay_pipeline[2] * coeffs_shadow[2];

  always @* product2 <= delay_pipeline[1] * coeffs_shadow[1];

  always @* product1 <= delay_pipeline[0] * coeffs_shadow[0];

  always @* sum1_1 <= product51 + product50;

  always @* sum1_2 <= product49 + product48;

  always @* sum1_3 <= product47 + product46;

  always @* sum1_4 <= product45 + product44;

  always @* sum1_5 <= product43 + product42;

  always @* sum1_6 <= product41 + product40;

  always @* sum1_7 <= product39 + product38;

  always @* sum1_8 <= product37 + product36;

  always @* sum1_9 <= product35 + product34;

  always @* sum1_10 <= product33 + product32;

  always @* sum1_11 <= product31 + product30;

  always @* sum1_12 <= product29 + product28;

  always @* sum1_13 <= product27 + product26;

  always @* sum1_14 <= product25 + product24;

  always @* sum1_15 <= product23 + product22;

  always @* sum1_16 <= product21 + product20;

  always @* sum1_17 <= product19 + product18;

  always @* sum1_18 <= product17 + product16;

  always @* sum1_19 <= product15 + product14;

  always @* sum1_20 <= product13 + product12;

  always @* sum1_21 <= product11 + product10;

  always @* sum1_22 <= product9 + product8;

  always @* sum1_23 <= product7 + product6;

  always @* sum1_24 <= product5 + product4;

  always @* sum1_25 <= product3 + product2;

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0.0000000000000000E+00;
        sumpipe1_2 <= 0.0000000000000000E+00;
        sumpipe1_3 <= 0.0000000000000000E+00;
        sumpipe1_4 <= 0.0000000000000000E+00;
        sumpipe1_5 <= 0.0000000000000000E+00;
        sumpipe1_6 <= 0.0000000000000000E+00;
        sumpipe1_7 <= 0.0000000000000000E+00;
        sumpipe1_8 <= 0.0000000000000000E+00;
        sumpipe1_9 <= 0.0000000000000000E+00;
        sumpipe1_10 <= 0.0000000000000000E+00;
        sumpipe1_11 <= 0.0000000000000000E+00;
        sumpipe1_12 <= 0.0000000000000000E+00;
        sumpipe1_13 <= 0.0000000000000000E+00;
        sumpipe1_14 <= 0.0000000000000000E+00;
        sumpipe1_15 <= 0.0000000000000000E+00;
        sumpipe1_16 <= 0.0000000000000000E+00;
        sumpipe1_17 <= 0.0000000000000000E+00;
        sumpipe1_18 <= 0.0000000000000000E+00;
        sumpipe1_19 <= 0.0000000000000000E+00;
        sumpipe1_20 <= 0.0000000000000000E+00;
        sumpipe1_21 <= 0.0000000000000000E+00;
        sumpipe1_22 <= 0.0000000000000000E+00;
        sumpipe1_23 <= 0.0000000000000000E+00;
        sumpipe1_24 <= 0.0000000000000000E+00;
        sumpipe1_25 <= 0.0000000000000000E+00;
        sumpipe1_26 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= sum1_14;
          sumpipe1_15 <= sum1_15;
          sumpipe1_16 <= sum1_16;
          sumpipe1_17 <= sum1_17;
          sumpipe1_18 <= sum1_18;
          sumpipe1_19 <= sum1_19;
          sumpipe1_20 <= sum1_20;
          sumpipe1_21 <= sum1_21;
          sumpipe1_22 <= sum1_22;
          sumpipe1_23 <= sum1_23;
          sumpipe1_24 <= sum1_24;
          sumpipe1_25 <= sum1_25;
          sumpipe1_26 <= product1;
        end
      end
    end // temp_process1

  always @* sum2_1 <= sumpipe1_1 + sumpipe1_2;

  always @* sum2_2 <= sumpipe1_3 + sumpipe1_4;

  always @* sum2_3 <= sumpipe1_5 + sumpipe1_6;

  always @* sum2_4 <= sumpipe1_7 + sumpipe1_8;

  always @* sum2_5 <= sumpipe1_9 + sumpipe1_10;

  always @* sum2_6 <= sumpipe1_11 + sumpipe1_12;

  always @* sum2_7 <= sumpipe1_13 + sumpipe1_14;

  always @* sum2_8 <= sumpipe1_15 + sumpipe1_16;

  always @* sum2_9 <= sumpipe1_17 + sumpipe1_18;

  always @* sum2_10 <= sumpipe1_19 + sumpipe1_20;

  always @* sum2_11 <= sumpipe1_21 + sumpipe1_22;

  always @* sum2_12 <= sumpipe1_23 + sumpipe1_24;

  always @* sum2_13 <= sumpipe1_25 + sumpipe1_26;

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0.0000000000000000E+00;
        sumpipe2_2 <= 0.0000000000000000E+00;
        sumpipe2_3 <= 0.0000000000000000E+00;
        sumpipe2_4 <= 0.0000000000000000E+00;
        sumpipe2_5 <= 0.0000000000000000E+00;
        sumpipe2_6 <= 0.0000000000000000E+00;
        sumpipe2_7 <= 0.0000000000000000E+00;
        sumpipe2_8 <= 0.0000000000000000E+00;
        sumpipe2_9 <= 0.0000000000000000E+00;
        sumpipe2_10 <= 0.0000000000000000E+00;
        sumpipe2_11 <= 0.0000000000000000E+00;
        sumpipe2_12 <= 0.0000000000000000E+00;
        sumpipe2_13 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
          sumpipe2_8 <= sum2_8;
          sumpipe2_9 <= sum2_9;
          sumpipe2_10 <= sum2_10;
          sumpipe2_11 <= sum2_11;
          sumpipe2_12 <= sum2_12;
          sumpipe2_13 <= sum2_13;
        end
      end
    end // temp_process2

  always @* sum3_1 <= sumpipe2_1 + sumpipe2_2;

  always @* sum3_2 <= sumpipe2_3 + sumpipe2_4;

  always @* sum3_3 <= sumpipe2_5 + sumpipe2_6;

  always @* sum3_4 <= sumpipe2_7 + sumpipe2_8;

  always @* sum3_5 <= sumpipe2_9 + sumpipe2_10;

  always @* sum3_6 <= sumpipe2_11 + sumpipe2_12;

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0.0000000000000000E+00;
        sumpipe3_2 <= 0.0000000000000000E+00;
        sumpipe3_3 <= 0.0000000000000000E+00;
        sumpipe3_4 <= 0.0000000000000000E+00;
        sumpipe3_5 <= 0.0000000000000000E+00;
        sumpipe3_6 <= 0.0000000000000000E+00;
        sumpipe3_7 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sum3_4;
          sumpipe3_5 <= sum3_5;
          sumpipe3_6 <= sum3_6;
          sumpipe3_7 <= sumpipe2_13;
        end
      end
    end // temp_process3

  always @* sum4_1 <= sumpipe3_1 + sumpipe3_2;

  always @* sum4_2 <= sumpipe3_3 + sumpipe3_4;

  always @* sum4_3 <= sumpipe3_5 + sumpipe3_6;

  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0.0000000000000000E+00;
        sumpipe4_2 <= 0.0000000000000000E+00;
        sumpipe4_3 <= 0.0000000000000000E+00;
        sumpipe4_4 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
          sumpipe4_3 <= sum4_3;
          sumpipe4_4 <= sumpipe3_7;
        end
      end
    end // temp_process4

  always @* sum5_1 <= sumpipe4_1 + sumpipe4_2;

  always @* sum5_2 <= sumpipe4_3 + sumpipe4_4;

  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0.0000000000000000E+00;
        sumpipe5_2 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
          sumpipe5_2 <= sum5_2;
        end
      end
    end // temp_process5

  always @* sum6_1 <= sumpipe5_1 + sumpipe5_2;

  always @ (posedge clk or posedge reset)
    begin: temp_process6
      if (reset == 1'b1) begin
        sumpipe6_1 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe6_1 <= sum6_1;
        end
      end
    end // temp_process6

  always @* sum_final <= sumpipe6_1;


  always @* output_typeconvert <= sum_final;


  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = $realtobits(output_register);
endmodule  // filter
